name: Node.js Matrix Testing & Conditional Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_build:
        description: 'Skip build step?'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
  schedule:
    - cron: '0 2 * * *'

env:
  NODE_VERSION_MATRIX: '["16", "18", "20"]'
  MIN_TEST_THRESHOLD: 2

jobs:
  test:
    name: Test Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-test
      cancel-in-progress: true
    
    strategy:
      matrix:
        node-version: ${{ fromJSON(env.NODE_VERSION_MATRIX) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: npm test
      env:
        CI: true
      continue-on-error: true
    
    - name: Save test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
        retention-days: 7
    
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: junit-results-node-${{ matrix.node-version }}
        path: test-results/**/*.xml

  test-summary:
    name: Generate Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: junit-results-*
        path: all-test-results
        merge-multiple: true
    
    - name: Setup XML parser
      run: sudo apt-get install libxml2-utils
    
    - name: Create test summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "## Node Version Test Results" >> $GITHUB_STEP_SUMMARY
        
        TOTAL_TESTS=0
        TOTAL_PASSED=0
        TOTAL_FAILED=0
        
        for result_file in all-test-results/**/*.xml; do
          if [ -f "$result_file" ]; then
            TESTS=$(xmllint --xpath 'string(//testsuites/@tests)' "$result_file" 2>/dev/null || echo "0")
            FAILURES=$(xmllint --xpath 'string(//testsuites/@failures)' "$result_file" 2>/dev/null || echo "0")
            ERRORS=$(xmllint --xpath 'string(//testsuites/@errors)' "$result_file" 2>/dev/null || echo "0")
            
            PASSED=$((TESTS - FAILURES - ERRORS))
            
            TOTAL_TESTS=$((TOTAL_TESTS + TESTS))
            TOTAL_PASSED=$((TOTAL_PASSED + PASSED))
            TOTAL_FAILED=$((TOTAL_FAILED + FAILURES + ERRORS))
            
            echo "### $(basename $(dirname $result_file))" >> $GITHUB_STEP_SUMMARY
            echo "- Tests: $TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- Failed: $((FAILURES + ERRORS))" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "## Overall Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Total Tests: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
        echo "- Total Passed: $TOTAL_PASSED" >> $GITHUB_STEP_SUMMARY
        echo "- Total Failed: $TOTAL_FAILED" >> $GITHUB_STEP_SUMMARY
        
        if [ $TOTAL_PASSED -lt $MIN_TEST_THRESHOLD ]; then
          echo "❌ FAILURE: Minimum test threshold of $MIN_TEST_THRESHOLD passed tests not met!" >> $GITHUB_STEP_SUMMARY
          echo "::error::Minimum test threshold not met"
          exit 1
        else
          echo "✅ SUCCESS: Minimum test threshold exceeded" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "TOTAL_PASSED=$TOTAL_PASSED" >> $GITHUB_ENV
      env:
        MIN_TEST_THRESHOLD: ${{ env.MIN_TEST_THRESHOLD }}
    
    - name: Save test count for future comparison
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo "${{ env.TOTAL_PASSED }}" > total_passed.txt
    
    - name: Upload test count for future comparison
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/upload-artifact@v4
      with:
        name: test-count-history
        path: total_passed.txt
        retention-days: 30

  check-test-count:
    name: Check Test Count Regression
    runs-on: ubuntu-latest
    needs: test-summary
    if: ${{ github.event_name != 'pull_request' && always() && needs.test-summary.result != 'skipped' }}
    
    steps:
    - name: Download previous test count
      uses: actions/download-artifact@v4
      with:
        name: test-count-history
        path: previous-count
    
    - name: Compare test counts
      run: |
        CURRENT_COUNT=${{ env.TOTAL_PASSED }}
        PREVIOUS_COUNT=$(cat previous-count/total_passed.txt 2>/dev/null || echo "0")
        
        echo "Current passed tests: $CURRENT_COUNT"
        echo "Previous passed tests: $PREVIOUS_COUNT"
        
        if [ "$CURRENT_COUNT" -lt "$PREVIOUS_COUNT" ]; then
          echo "::error::Test count regression detected! Current: $CURRENT_COUNT, Previous: $PREVIOUS_COUNT"
          exit 1
        elif [ "$CURRENT_COUNT" -gt "$PREVIOUS_COUNT" ]; then
          echo "::notice::Test count improved! Current: $CURRENT_COUNT, Previous: $PREVIOUS_COUNT"
        else
          echo "::notice::Test count unchanged: $CURRENT_COUNT"
        fi

  nightly-test:
    name: Nightly Test with Current Node
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Current Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'current'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
      env:
        CI: true

  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test, test-summary, check-test-count]
    if: |
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      needs.test.result == 'success' &&
      needs.test-summary.result == 'success' &&
      (needs.check-test-count.result == 'success' || needs.check-test-count.result == 'skipped') &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.skip_build != 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  approve-build:
    name: Approve Build for Deployment
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.skip_build == 'false' }}
    
    steps:
    - name: Wait for manual approval
      run: echo "Manual approval would be requested here"